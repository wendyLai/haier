<div id="kind1_t">
    <div id="container" style="min-width:700px;height:400px"></div>
    <div id="datashow">
        <div class="ui label bgblue fl">
            2323kbps&nbsp;<i class="long arrow up icon"></i>
        </div>
        <div class="ui label bgred fl">
            0000kbps&nbsp;<i class="long arrow down icon"></i>
        </div>
        <div class="ui button bgblue fr">
            查看状态详情
        </div>
    </div>
</div>

<div class="ui divider"></div>


<div id="kind1_b" class="ui horizontal list">

    <div class="item">
        <span class="kind1img navimg4"></span>
        <div class="content">
            LAN1未连接
        </div>
    </div>
    <div class="item">
        <span class="kind1img navimg4"></span>
        <div class="content">
            LAN2未连接
        </div>
    </div>
    <div class="item">
        <span class="kind1img navimg3"></span>
        <div class="content">
            WAN未连接
        </div>
    </div>
    <div class="item">
        <span class="kind1img navimg2"></span>
        <div class="content">
            USB未连接
        </div>
    </div>
    <div class="item">
        <span class="kind1img navimg6"></span>
        <div class="content">
            2G-未开启
        </div>
    </div>
    <div class="item">
        <span class="kind1img navimg6"></span>
        <div class="content">
            5G-未开启
        </div>
    </div>
    <div class="item">
        <span class="kind1img navimg1"></span>
        <div class="content">
            重启路由器
        </div>
    </div>

</div>

<script>
  
    $(function(){

        var main_height=$("#main").outerHeight();
        $("#nav").css("height",main_height);
        
        Highcharts.setOptions({                                                     
            global: {                                                               
                useUTC: false                                                       
            }                                                                       
        });

        var currentTime = (new Date()).getTime();
        var yMax = 0;
        var charsInterval;

        function getMax(maxValue) {
            if (maxValue % 100 == 0) {
                return maxValue;
            } else {
                console.log((maxValue / 100 + 1) * 100);
                return (parseInt(maxValue / 100) + 1) * 100;
            }
        }

        $('#container').highcharts({
            credits: {
                enabled: false
            },
            colors: ['#00c8e0', '#f00', '#00c8e0'],
            chart: {                                                                
                events: {                                                           
                    load: function() {

                        // set up the updating of the chart each second             
                        var series = this.series[0];  
                        var series1 = this.series[1];

                        //TODO 有数据后再处理
                        /*
                        charsInterval = setInterval(function(){
                            //alert(series.data.length);

                            callRpc(rpcUrl + routeStateIndex.paramOperate.businessRouterType + token,routeStateIndex.paramOperate.method.getTrafficInfo, null, function(data){

                                var currxrate = data.currxrate;//实时接收速率(单位KB/s)
                                var curtxrate = data.curtxrate;//实时发送速率(单位KB/s)
                                var x = (new Date()).getTime(); // current time
                                $('#up_curtxrate').text(curtxrate.toFixed(2) + "kbps");
                                $('#down_currxrate').text(currxrate.toFixed(2) + "kbps");

                                if (series.data.length > 10) {
                                    series.removePoint(0);
                                }
                                if (series1.data.length > 10) {
                                    series1.removePoint(0);
                                }
                                if (currxrate > yMax) {
                                    yMax = currxrate;
                                    series.yAxis.setExtremes(0, getMax(yMax));
                                }
                                if (curtxrate > yMax) {
                                    yMax = curtxrate;
                                    series.yAxis.setExtremes(0, getMax(yMax));
                                }

                                series.addPoint([x, curtxrate]);
                                series1.addPoint([x, currxrate]);
                            });
                        }, 1000); 
                        common.intervalList.chartsInter = charsInterval;
                        */
                    }                                                               
                }                                                                   
            },                                                                      
            title: {                                                                
                text: ''                                            
            },   
            xAxis: {
                gridLineWidth:1,
                type: 'datetime',                                                   
                tickPixelInterval: 100
            },  
            yAxis: {     
                type: 'linear',
                title: {                                                            
                    text: ''                                                   
                },                                                                  
                plotLines: [{                                                       
                    value: 0,                                                       
                    width: 1,                                                       
                    color: '#00c8e0'                                                
                }],
                max: 10,
                min:0,
                tickInterval: 10,
                tickAmount: 5,
                labels: {
                    formatter:function(){
                        return this.value + (this.value > 1000 ? "kbps" : "kbps");
                    }
                  }
            },                                                                      
            tooltip: {                                                              
                formatter: function() {                                             
                        return '<b>'+ this.series.name +'</b><br>'+                
                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) +'<br>'+
                        Highcharts.numberFormat(this.y, 2);                         
                }                                                                   
            },                                                                      
            legend: {                                                               
                enabled: false                                                      
            },                                                                      
            exporting: {                                                            
                enabled: false                                                      
            },                                                                      
            series: [{                                                              
                name: '发送速率', 
                data: [{x:currentTime, y: 0}]
            } ,{                                                              
                name: '接收速率',
                data: [{x:currentTime, y: 0}]
            }] 
        });


    })

</script>